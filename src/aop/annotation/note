  切面（Aspect）：业务流程运行的某个特定步骤，是应用运行过程的关注点，关注点可能横
切多个对象，所以常常也称作横切关注点。
  连接点（Joinpoint）：程序执行过程中明确的点，如方法调用或者异常抛出
  增强处理（Advice）：AOP框架在特定的切入点执行的增强处理
  切入点（Pointcut）：可以插入增强处理的连接点。

  引入：讲方法或字段增加到被处理的类中。Spring允许引入新的接口道任何被处理的对象。如
可以引用，是任何对象实现IsModified接口简化缓存
  目标对象：AOP框架进行增强处理的对象，也被称为被增强的对象。如若AOP框架是通过运行时
代理来实现的，那么这个对象时一个被代理的对象
  AOP代理：AOP框架穿件的对象，简单地说，代理就是对目标对象的加强。Spring中的AOP代理
可以是JDK动态代理，也可以是CGLIB代理。前者是为实现接口的目标对象代理，后者是为不实现
接口的目标对象的代理
  植入（Weaving）：将增强处理增加到目标对象中，并创建一个呗增强的对象（AOP代理）的
过程就是植入。织入的两种方式：编译时增强（AspectJ）和运行时增强（CGLIB）。Spring和
其他纯Java AOP框架一样，在运行时完成织入。

启动对AOP的支持
 <aop:aspectj-autoproxy/>或者<bean class="org.springframework.aop.aspectj.annotation.ANnotationAwareAspectJAutoProxyCreator"/>
优先级
 不同的advise有不同的优先级改变优先级可以实现org.springframework.core.Ordered接口或者
使用@Order Annotation

  定义切入点@Pointcut("execution(* transfer(..))")private void t(){}
  @Before(Pointcut="t")
  切入点指示符
   execution:用于匹配执行方法的连接点
     1.modifiers-pattern：指定方法的修饰符，可省
     2.ret-type-pattern：返回值支持通配符，可省
     3.declaring-type-pattern：方法所属类，支持通配符，可省
     4.name-pattern：指定方法名支持通配符，可省
     5.param-pattern：参数支持两个通配符*和... ...表任意个参数
     6.throws-pattern：方法抛出的异常
   within(package)袍内的任意连接点
   this（Interface）实现了Interface的对象
   target(class)匹配对象的所有连接点
   args(type)匹配只接受一个参数且参数类型为type的所有连接点
   bean（）指定bean的所有连接点
  组合切入点表达式&& || !
